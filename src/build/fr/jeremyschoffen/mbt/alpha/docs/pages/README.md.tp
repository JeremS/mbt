◊(require '[fr.jeremyschoffen.textp.alpha.html.tags :refer :all])◊
◊(require '[fr.jeremyschoffen.textp.alpha.doc.tags :as tags])◊
◊(require '[fr.jeremyschoffen.mbt.alpha.docs.tags :refer :all])◊
# Mbt

A build tool designed to be used with ◊tools-deps\.


## Installation
◊tags/project-coords

## Usage
Mbt aims to provide APIs to build clojure projects. It is designed as follow:
- Each API functions take only one argument and returns whatever is relevant
- This one argument is a map understood to be the config
- We can chain build operations using the `->` macro and some utilities.


To get started here is a build scheme I used building mbt at some point.

We pull in the core api, the default api and some utilities.
```clojure
(ns fr.jeremyschoffen.mbt.alpha.build
  (:require
    [clojure.spec.test.alpha :as spec-test]
    [fr.jeremyschoffen.mbt.alpha.core :as mbt-core]
    [fr.jeremyschoffen.mbt.alpha.default :as mbt-defaults]
    [fr.jeremyschoffen.mbt.alpha.utils :as u]
    [docs.core :as docs]))
```

We create aliases to use in keywords
```clojure
(u/pseudo-nss
  maven
  maven.pom
  project
  project.license
  version-file
  versioning)
```

We instrument our build functions.
```clojure
(spec-test/instrument
  `[mbt-core/deps-make-coord
    mbt-defaults/write-version-file!
    mbt-defaults/build-before-bump!
    mbt-defaults/versioning-tag-new-version!
    mbt-defaults/build-jar!
    mbt-defaults/maven-install!])
```

We construct the build config with specifying some values:
```clojure
(def conf
  (mbt-defaults/config
    {::maven/group-id    'fr.jeremyschoffen
     ::project/author    "Jeremy Schoffen"

     ::version-file/ns   'fr.jeremyschoffen.mbt.alpha.version
     ::version-file/path (u/safer-path "src" "main" "fr" "jeremyschoffen" "mbt" "alpha" "version.clj")
     ::versioning/scheme mbt-defaults/git-distance-scheme
     ::versioning/major  :alpha

     ::project/licenses  [{::project.license/name "Eclipse Public License - v 2.0"
                           ::project.license/url "https://www.eclipse.org/legal/epl-v20.html"
                           ::project.license/distribution :repo
                           ::project.license/file (u/safer-path "LICENSE")}]}))
```


We can make a build task that compute a new version, generates docs, create a tag in git...
```clojure
◊un-escaped{
(defn new-milestone! [param]
  (-> param
      (u/assoc-computed ::versioning/version next-version
                        ::project/version (comp str ::versioning/version))
      (mbt-defaults/build-before-bump! (u/do-side-effect! generate-docs!)
                                       (u/do-side-effect! mbt-defaults/write-version-file!))
      (u/do-side-effect! mbt-defaults/versioning-tag-new-version!)
      (u/do-side-effect! mbt-defaults/build-jar!)
      (u/do-side-effect! mbt-defaults/maven-install!)))
}
```

Since I use this namespace at the repl, I have put some building tasks in a comment
```clojure
(comment
  (new-milestone! conf)

  (mbt-core/clean! conf))
```


## Limitations
This project is very new. Not everything you might want of such a tools is present yet.

Some aspects still need some work:
- The clojure compilation story is very limited. It's just a thin wrapper around `clojure.core/compile`.
I'd like to add something more developed, like compilation in a separated classloader for instance.
- There is no default way of building jars of aot compiled classes. It can be made by hand using the core api.
- Right now the git tags generated by the version scheme can't be signed.


## Inspirations
This project is heavily inspired by other build tools in particular and projects in general.
The ability to study these code bases helps a lot.

- ◊boot
- ◊badigeon
- ◊cambada
- ◊depstar
- ◊leiningen
- ◊metav
- ◊meander
- ◊ring
- ◊tools-deps


## License

Copyright © 2019-2020 Jeremy Schoffen.

Distributed under the Eclipse Public License v 2.0.
