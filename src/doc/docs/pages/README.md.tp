◊(require '[fr.jeremyschoffen.textp.alpha.html.tags :refer :all] :reload)◊
◊(require '[fr.jeremyschoffen.textp.alpha.doc.tags :as tags])◊
◊(require '[docs.tags :refer :all])◊
# Mbt

A build tools designed to be used with ◊tools-deps\.

## Installation
◊tags/project-coords

## Usage
Mbt provides apis to help create build scripts written in clojure. The api works as follow:
- Each build task is a function of one argument
- This one argument is a map containing the configuration
- Using some utilities we can chain several tasks.


To get started however, this project's own build script might help describe mbt's usage.

We have a standard ns declaration pulling in the core api, the default api and some utilities.
```clojure
(ns build
  (:require
    [clojure.spec.test.alpha :as spec-test]
    [com.jeremyschoffen.mbt.alpha.core :as mbt-core]
    [com.jeremyschoffen.mbt.alpha.default :as mbt-defaults]
    [com.jeremyschoffen.mbt.alpha.utils :as u]))
```

We can instrument our build tasks.
```clojure
(spec-test/instrument
  `[mbt-defaults/add-version-file!
    mbt-defaults/bump-tag!
    mbt-defaults/build-jar!
    mbt-defaults/install!])
```

We declare some configuration specific to this project:
```clojure
(def specific-conf
  (sorted-map
    :maven/group-id 'fr.jeremyschoffen
    :project/author "Jeremy Schoffen"

    :version-file/ns 'fr.jeremyschoffen.mbt.alpha.version
    :version-file/path (u/safer-path "src" "main" "fr" "jeremyschoffen" "mbt" "alpha" "version.clj")
    :versioning/scheme mbt-defaults/git-distance-scheme
    :versioning/major :alpha
    :versioning/stable false

    :project/licenses [{:project.license/name "Eclipse Public License - v 2.0"
                        :project.license/url "https://www.eclipse.org/legal/epl-v20.html"
                        :project.license/distribution :repo
                        :project.license/file (u/safer-path "LICENSE")}]))
```

We fill the rest of the configuration with default values.
```clojure
(def conf (mbt-defaults/make-conf specific-conf))
```

We can define a specific step that generates docs and a version file then creates a new git tag fixing a new version
of the project.
```clojure
◊un-escaped{
(defn new-milestone! [param]
  (-> param
      (mbt-defaults/generate-before-bump! (u/side-effect! generate-docs!)
                                          (u/side-effect! mbt-defaults/write-version-file!))
      (u/side-effect! mbt-defaults/bump-tag!)))
}

```

Since I use this ns at the repl, I have just put some building tasks in a comment
```clojure
(comment
  (new-milestone! conf)

  (mbt-core/clean! conf)

  (mbt-defaults/build-jar! conf)
  (mbt-defaults/install! conf))
```
## Limitations
This project is very new. Not everything you might want of such a tools is present yet.

Some aspects still need some work:
- The clojure compilation story is very limited. It's just a thin wrapper around `clojure.core/compile`.
I'd like to add something more developed, like compilation in a separated classloader for instance.
- There is no default support for the building of jars containing aot compiled classes. It should
be made by hand using the core api.
- Right now the git tag generated by the version scheme can't be signed.

## Inspirations
This project is heavily inspired by other build tools in particular and projects in general.
The ability to study these code bases helped a lot.

- ◊boot
- ◊badigeon
- ◊cambada
- ◊depstar
- ◊leiningen
- ◊metav
- ◊meander
- ◊ring
- ◊tools-deps




## License

Copyright © 2019-2020 Jeremy Schoffen.

Distributed under the Eclipse Public License v 2.0.
